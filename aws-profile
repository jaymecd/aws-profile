#!/usr/bin/env bash
#
# This file is part of the aws-profile package.
#
# (c) Nikolai Zujev <nikolai.zujev@gmail.com>
#
# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.
#

r="\033[0;31m" # red
w="\033[0;37m" # white
g="\033[0;32m" # green
y="\033[1;33m" # yellow
x="\033[0m" # reset

_caller="$(basename -- "$0" | sed -e s/^\-*//)"

if ! test "$_caller" = "bash"; then
    echo "Usage: source $(basename "$0") [profile] [config]" >&2
    exit 1
fi

unset _caller

# NB! No exit after, only return

profile="${1:-}"
config_file=$(echo "${2:-${AWS_CONFIG_FILE:-~/.aws/config}}" | sed "s:~:$HOME:" );
credentials_file=$(echo "~/.aws/credentials" | sed "s:~:$HOME:" );

export config_file
export credentials_file
export profile_name=${profile:-$AWS_DEFAULT_PROFILE}

profiles=($(php -r "$(cat <<"EOL"
    $file = getenv('config_file');
    $list = array_keys(array_filter((array) @parse_ini_file($file, true)));
    $list = array_map(function($x) {return preg_replace('/^profile\s+/','',$x);}, $list );
    echo $list ? implode(PHP_EOL, $list).PHP_EOL : null;
EOL
)"))

profile_data=($(php -r "$(cat <<"EOL"
    $name = getenv('profile_name');
    $file = getenv('config_file');
    $list = array_filter((array) @parse_ini_file($file, true));
    $file = getenv('credentials_file');
    $creds = array_filter((array)@parse_ini_file($file, true));
    array_walk($list, function(&$a, $b) use ($creds) {
        $p = str_replace('profile ', '', $b);
        $a = array_merge($a, isset($creds[$p]) ? $creds[$p] : []);
    });
    $keys = array_keys($list);
    $vals = array_values($list);
    $keys = array_map(function($x) {return preg_replace('/^profile\s+/','',$x);}, $keys);
    $key = array_search($name, $keys, true);
    echo (false === $key) ? null : implode(PHP_EOL, array($vals[$key]['aws_access_key_id'], $vals[$key]['aws_secret_access_key']));
EOL
)"))

updated=0

if [ -z $profile ]; then
    default_profile=$AWS_DEFAULT_PROFILE
elif [[ "-" = $profile ]]; then
    updated=3 # turn off
elif [[ "+" = $profile ]]; then
    updated=2 # reset default
else 
    for name in ${profiles[@]}; do
        if [[ "x$name" = "x$profile" ]]; then
            default_profile="$name"
            updated=1
            break; 
        fi
    done

    if [ -z $default_profile ]; then
        echo -e "${r}ERROR:${x} profile [${y}${profile}${x}] could not be found in [${y}${config_file}${x}] file." >&2
        return 1
    fi
fi

if [[ -z $AWS_CONFIG_FILE && $updated -ne 3 ]]; then
    echo -e "${g}AWS support was successfully switched on${x}"
fi

export AWS_PROFILE="${profile_name}"
export AWS_ACCESS_KEY="${profile_data[0]}"
export AWS_ACCESS_KEY_ID="${profile_data[0]}"
export AWS_SECRET_KEY="${profile_data[1]}"
export AWS_SECRET_ACCESS_KEY="${profile_data[1]}"

if [ $updated -eq 1 ]; then
    export AWS_CONFIG_FILE=$config_file
    export AWS_DEFAULT_PROFILE=$default_profile

    echo -e "${g}Profile was successfully switched${x}"
elif [ $updated -eq 2 ]; then
    export AWS_CONFIG_FILE=$config_file
    unset AWS_DEFAULT_PROFILE

    echo -e "${y}Profile was successfully reset${x}"
elif [ $updated -eq 3 ]; then
    unset AWS_CONFIG_FILE AWS_DEFAULT_PROFILE
    unset AWS_ACCESS_KEY AWS_ACCESS_KEY_ID
    unset AWS_SECRET_KEY AWS_SECRET_ACCESS_KEY

    echo -e "${y}AWS support was successfully switched off${x}"
else
    export AWS_CONFIG_FILE=$config_file

    cat <<EOL

AWS_DEFAULT_PROFILE  : ${AWS_DEFAULT_PROFILE:-default}
AWS_CONFIG_FILE      : ${AWS_CONFIG_FILE:-~}
AWS_DEFAULT_REGION   : ${AWS_DEFAULT_REGION:-~}
AWS_DEFAULT_OUTPUT   : ${AWS_DEFAULT_OUTPUT:-~}

Configured profiles  : ${profiles[@]:-~}

EOL
fi

unset config_file credentials_file default_profile profiles profile profile_data profile_name name r g y w h x
